"""
.. module:: plot_mav_csv.py
    :platform: MacOS, Unix, Windows,
    :synopsis: Plot data in csv's generated by mavcsv_logging.py. Specify the 
    MAVLink message type, and parameters by specifying column names (or header)
    arguments. For example:

    python plot_mav_csv.py -c ../../my_data/2021_08_12.csv -m GPS_RAW_INT --ch0 lat --ch1 lon

    where '../../my_data/2021_08_12.csv' is the file path and name, 
    'GPS_RAW_INT' is the MAVLink message type,
    'lat' is a parameter within that message type we want to plot,
    'lon' is a parameter also within that message type we want to plot.

    Extra parameters for 3D plots can be added too:
    python plot_mav_csv.py -c ../../reboat_data/mav_csv_data/2021_10_17a.csv --ch0 lat --ch1 lon --ch2 current_distance --ch2_max 0.0 --ch2_min -10.0 -s 1450 -e 6000 --title "Depth Measurements and Position"

    where '../../my_data/2021_08_12.csv' is the file path and name, 
    'GPS_RAW_INT' is the MAVLink message type,
    'lat' is a parameter within that message type we want to plot,
    'lon' is a parameter also within that message type we want to plot
    'current_distance' is a parameter from a DIFFERENT sensor associated with 
    time and place that the

.. moduleauthor:: Pavlo Vlastos <pvlastos@ucsc.edu>
"""
import csv
import sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
from mpl_toolkits import mplot3d

import argparse

###############################################################################
# Parse Arguments
parser = argparse.ArgumentParser()

parser.add_argument('-c', '--csv_file_path',
                    nargs='?',
                    default='<enter_file_path>.csv',
                    help='A valid path to a MAVLink csv file generated by \
                        mavcsv_logging.py')

parser.add_argument('--ch0',
                    dest='ch0',
                    type=str,
                    default=None,
                    help='A valid column based on one of the csv header names,\
                         for example \'lat\', (don\'t include the \' in the \
                             command line')

parser.add_argument('--ch0_max',
                    dest='ch0_max',
                    type=float,
                    default=1000000000000.0,
                    help='Maximum expected value for column header 0')

parser.add_argument('--ch0_min',
                    dest='ch0_min',
                    type=float,
                    default=-1000000000000.0,
                    help='Minimum expected value for column header 0')

parser.add_argument('--ch1',
                    dest='ch1',
                    type=str,
                    default=None,
                    help='A valid column based on one of the csv header names,\
                         for example \'lon\'')

parser.add_argument('--ch1_max',
                    dest='ch1_max',
                    type=float,
                    default=1000000000000.0,
                    help='Maximum expected value for column header 1')

parser.add_argument('--ch1_min',
                    dest='ch1_min',
                    type=float,
                    default=-1000000000000.0,
                    help='Minimum expected value for column header 1')

parser.add_argument('--ch2',
                    dest='ch2',
                    type=str,
                    default=None,
                    help='A valid column based on one of the csv header names,\
                         for example \'alt\'')

parser.add_argument('--ch2_max',
                    dest='ch2_max',
                    type=float,
                    default=1000000000000.0,
                    help='Maximum expected value for column header 2')

parser.add_argument('--ch2_min',
                    dest='ch2_min',
                    type=float,
                    default=-1000000000000.0,
                    help='Minimum expected value for column header 2')

parser.add_argument('-e', '--end',
                    type=int,
                    dest='data_end_index',
                    default=100000000000000,
                    help='The end index for the data')

parser.add_argument('-m', '--mav_message',
                    dest='mav_message',
                    type=str,
                    default='ALL',
                    help='A valid MAVLink message name, for example: \
                        GPS_RAW_INT. For more examples see \
                            https://mavlink.io/en/messages/common.html')

parser.add_argument('--margins',
                    dest='margins',
                    type=float,
                    default=2.5,
                    help='Plot margins')

parser.add_argument('-o', '--outliers',
                    dest='outliers_flag',
                    action='store_true',
                    default=None,
                    help='Flag for getting rid of outliers in data')

parser.add_argument('--title',
                    type=str,
                    default='Default Title',
                    help='User defined title for the plot')

parser.add_argument('-s', '--start',
                    type=int,
                    dest='data_start_index',
                    default=0,
                    help='The start index for the data')


arguments = parser.parse_args()

# data_start_index = 0 #@TODO make this an optional argument
data_start_index = arguments.data_start_index
csv_file_path = arguments.csv_file_path
mav_message = arguments.mav_message
margins = arguments.margins

ch0 = arguments.ch0
ch0_max = arguments.ch0_max
ch0_min = arguments.ch0_min

ch1 = arguments.ch1
ch1_max = arguments.ch1_max
ch1_min = arguments.ch1_min

ch2 = arguments.ch2
ch2_max = arguments.ch2_max
ch2_min = arguments.ch2_min
outliers_flag = arguments.outliers_flag
data_end_index = arguments.data_end_index
title = arguments.title

num_cols = 0

if ch0:
    num_cols += 1
if ch1:
    num_cols += 1
if ch2:
    num_cols += 1

print('\r\nArguments: {}'.format(vars(arguments)))
print('\r\nMAVLink message type to plot: {}, type: {}'.format(
    mav_message,
    type(mav_message)))

print('\r\nNumber of csv columns given: {}'.format(num_cols))
print('\r\nData start index: {}'.format(data_start_index))
print('\r\nData start index: {}'.format(data_end_index))
print("\r\nUsing {} csv names (headers): ".format(num_cols))
print("\r\nMAVLink parameter column names (headers): ")
mav_params = []
mav_param_max_limits = []
mav_param_min_limits = []
if ch0:
    mav_params.append(ch0)
    mav_param_max_limits.append(ch0_max)
    mav_param_max_limits.append(ch0_min)
    print('    {} min: {}, max: {}'.format(ch0, ch0_min, ch0_max))
if ch1:
    mav_params.append(ch1)
    mav_param_max_limits.append(ch1_max)
    mav_param_min_limits.append(ch1_min)
    print('    {} min: {}, max: {}'.format(ch1, ch1_min, ch1_max))
if ch2:
    mav_params.append(ch2)
    mav_param_max_limits.append(ch2_max)
    mav_param_min_limits.append(ch2_min)
    print('    {} min: {}, max: {}'.format(ch2, ch2_min, ch2_max))

###############################################################################
# Open the MAVLink csv file
# We loop through the MAVLink messages of the csv file, and if we find one of
# the target mavlink messages, such as GPS_RAW_INT, then we get the data in
# that messages specified by the column name (or header) arguments.

print("\r\nnum_cols: {}".format(num_cols))

target_mav_data = np.zeros((1, num_cols))

# try:
print('\r\ncsv_file_path = {}'.format(csv_file_path))
print('type = {}'.format(type(csv_file_path)))

with open(csv_file_path, 'r') as read_obj:
    csv_reader = csv.reader(read_obj)
    csv_dict_reader = csv.DictReader(read_obj)
    column_names = csv_dict_reader.fieldnames

    print('\r\nAll column names: {}'.format(column_names))

    skip_index = 0

    for row in csv_dict_reader:

        # print("row: {}".format(row[column_names[0]]))

        if (((row[column_names[0]] == mav_message) or (mav_message == 'ALL'))
            and (skip_index >= data_start_index) and
                (skip_index <= data_end_index)):

            # @NOTE: these are strings in a matrix at this point, NOT floats,
            # or ints.
            new_data = np.zeros((1, num_cols))
            for param, i in zip(mav_params, range(num_cols)):
                new_data[0, i] = float(row[param])  # Now we have a non-string

                # print("******param: {}: {}".format(param, new_data[0, i]))

                ###############################################################
                # Rules for specific MAVLink messages and parameters
                ###############################################################
                # if mav_message == 'GPS_RAW_INT':
                if (param == 'lat') or (param == 'lon'):
                    new_data[0, i] /= 10000000.0

                if (param == 'current_distance'):
                    new_data[0, i] /= -1000.0

                ###############################################################
                # Impose limits
                if (param == ch0):
                    if new_data[0, i] > ch0_max:
                        new_data[0, i] = ch0_max

                    if new_data[0, i] < ch0_min:
                        new_data[0, i] = ch0_min

                if (param == ch1):
                    if new_data[0, i] > ch1_max:
                        new_data[0, i] = ch1_max

                    if new_data[0, i] < ch1_min:
                        new_data[0, i] = ch1_min

                if (param == ch2):
                    if new_data[0, i] > ch2_max:
                        new_data[0, i] = ch2_max

                    if new_data[0, i] < ch2_min:
                        new_data[0, i] = ch2_min

            ###################################################################
            target_mav_data = np.concatenate((target_mav_data, new_data),
                                             axis=0)

        skip_index += 1

n_rows = skip_index - data_start_index
# except:
#     print('Enter a valid MAVLink csv file path.')
#     sys.exit()

###############################################################################
# Find and throw away outliers, for example a row of np.array([lat: 0, lon: 0])
# for data in 'GPS_RAW_INT' is probably not correct if we were testing GPS
# in Santa Cruz California, USA
target_mav_data = np.delete(target_mav_data, 0, 0)
target_mav_data_clean = target_mav_data
target_mav_data_t = np.transpose(target_mav_data)

if outliers_flag:
    sigma_vec = np.zeros((num_cols, 1))
    mu_vec = np.zeros((num_cols, 1))

    # Use the transpose of the target mavlink data temporarily for convenience
    for row, sigma, i, param in zip(target_mav_data_t, sigma_vec,
                                    range(num_cols), mav_params):
        mu_vec[i, 0] = np.mean(row)
        sigma_vec[i, 0] = np.std(row)
        print('MAVLink parameter {}: {} mean: {}, standard deviation: {}'.
              format(i,
                     param,
                     np.round(mu_vec[i, 0], 3),
                     np.round(sigma_vec[i, 0], 3)))

    for row, h in zip(target_mav_data, range(n_rows)):
        for col, i, param in zip(row, range(num_cols), mav_params):

            if np.abs(col - mu_vec[i, 0])**2 > sigma_vec[i, 0]:
                target_mav_data_clean = np.delete(target_mav_data, h, 0)
                print('deleting row {} because {} {} holds an outlier: {}'.
                      format(h, param, i, col))

print('target_mav_data_clean: \r\n{}'.format(
    target_mav_data_clean))
print('target_mav_data_clean.shape: \r\n{}'.format(
    target_mav_data_clean.shape))
###############################################################################
# Plot


fig = plt.figure()
ax = plt.gca()

# If there are 3 MAVLink parameter arguments for this script, then assume 3D
# plot. @TODO: Find a more elegant, all-encompassing way to do this
if len(mav_params) == 3:
    ax = plt.axes(projection='3d')
    # ax = fig.add_subplot(projection='3d')
    ax.plot(target_mav_data_clean[:, 0],
            target_mav_data_clean[:, 1],
            target_mav_data_clean[:, 2],
            color='#1f77b4', marker='o', markersize=2, markerfacecolor='black',
            markeredgecolor='black')
    ax.scatter(target_mav_data_clean[0, 0], target_mav_data_clean[0, 1],
               target_mav_data_clean[0, 2], color='lime', label='Start',
               marker='o', edgecolors='lime')
    ax.scatter(target_mav_data_clean[-1, 0], target_mav_data_clean[-1, 1],
               target_mav_data_clean[-1, 2], color='red', label='End',
               marker='s', edgecolors='black')
    # ax.set_zlim(min(target_mav_data_clean[:, 2]) - margins,
    #             max(target_mav_data_clean[:, 2]) + margins)
    ax.set_zlabel('{}'.format(mav_params[2]))
    ax.legend()
else:
    print("target_mav_data_clean.shape: {}".format(target_mav_data_clean.shape))
    plt.plot(target_mav_data_clean[:, 0], target_mav_data_clean[:, 1])
    plt.scatter(target_mav_data_clean[0, 0], target_mav_data_clean[0, 1],
                color='lime',
                label='Start',
                marker='o',
                edgecolors='black')
    plt.scatter(target_mav_data_clean[-1, 0], target_mav_data_clean[-1, 1],
                color='red',
                label='End',
                marker='s',
                edgecolors='black')

plt.xlabel('{}'.format(mav_params[0]))
plt.ylabel('{}'.format(mav_params[1]))

ax.set_xlim(min(target_mav_data_clean[:, 0]) - margins,
            max(target_mav_data_clean[:, 0]) + margins)
ax.set_ylim(min(target_mav_data_clean[:, 1]) - margins,
            max(target_mav_data_clean[:, 1]) + margins)

plt.title('{}'.format(title))

plt.grid()
plt.show()
