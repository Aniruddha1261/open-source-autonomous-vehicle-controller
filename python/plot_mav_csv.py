"""
.. module:: plot_mav_csv.py
    :platform: MacOS, Unix, Windows,
    :synopsis: Plot data in csv's generated by mavcsv_logging.py. Specify the 
    MAVLink message type, and parameters by specifying column names (or header)
    arguments. For example:

    python plot_mav_csv.py ../../my_data/2021_08_12.csv GPS_RAW_INT lat lon

    where '../../my_data/2021_08_12.csv' is the file path and name, 
    'GPS_RAW_INT' is the MAVLink message type,
    'lat' is a parameter within that message type we want to plot,
    'lon' is a parameter also within that message type we want to plot.

.. moduleauthor:: Pavlo Vlastos <pvlastos@ucsc.edu>
"""
import csv
import sys
import numpy as np
import matplotlib.pyplot as plt

import argparse

###############################################################################
# Parse Arguments
parser = argparse.ArgumentParser()

parser.add_argument('csv_file_path',
                    nargs='?',
                    default='<enter_file_path>.csv',
                    help='A valid path to a MAVLink csv file generated by \
                        mavcsv_logging.py')

parser.add_argument('mav_message',
                    nargs='?',
                    default='GPS_RAW_INT',
                    help='A valid MAVLink message name, for example: \
                        GPS_RAW_INT. For more examples see \
                            https://mavlink.io/en/messages/common.html')

parser.add_argument('column_header_0',
                    nargs='?',
                    default='lat',
                    help='A valid column based on one of the csv header names,\
                         for example \'lat\'')

parser.add_argument('column_header_1',
                    nargs='?',
                    default='lon',
                    help='A valid column based on one of the csv header names,\
                         for example \'lon\'')

parser.add_argument('column_header_2',
                    nargs='?',
                    default='alt',
                    help='A valid column based on one of the csv header names,\
                         for example \'alt\'')

arguments = parser.parse_args()

csv_file_path = arguments.csv_file_path
mav_message = arguments.mav_message
column_header_0 = arguments.column_header_0
column_header_1 = arguments.column_header_1
column_header_2 = arguments.column_header_2

# -1 because we don't count the scpit name itself.
num_args = len(sys.argv) - 1
num_cols = num_args - 1  # subtract 1 again so as not to count the csv file

print('Number of arguments given: {}'.format(num_args))
print('\r\nMAVLink message to plot: {}'.format(mav_message))

columns = sys.argv[-num_cols:]

print("\r\nUsing {} csv names (headers): ".format(num_cols))
for col in columns:
    print('    {}'.format(col))

###############################################################################
# Open the MAVLink csv file
# Data is initially a 1x(n-1) because the first column holds the MAVLink  
#message names along with the other specified csv header column names of 
# interest: column_header_{0}, column_header_{1}, ... column_header_{n-1}
#
# We loop through the MAVLink messages of the csv file, and if we find one of
# the target mavlink messages, such as GPS_RAW_INT, then we get the data in
# that messages specified by the column name (or header) arguments.

target_mav_data = np.zeros((1, num_cols))

# try:
print('\r\ncsv_file_path = {}'.format(csv_file_path))
print('type = {}'.format(type(csv_file_path)))

with open(csv_file_path, 'r') as read_obj:
    csv_reader = csv.reader(read_obj)
    csv_dict_reader = csv.DictReader(read_obj)
    column_names = csv_dict_reader.fieldnames

    print('\r\nAll column names: {}'.format(column_names))

    for row in csv_dict_reader:
        if row[column_names[0]] == mav_message:
            # print('{}: {}, {}: {}'.format(column_header_0,
            #                               row[column_header_0],
            #                               column_header_1,
            #                               row[column_header_1]))
            target_mav_data = np.concatenate(
                (target_mav_data,
                    np.array([[row[column_names[0]], 
                    row[column_header_0], 
                    row[column_header_1]]])),
                axis=0)

# except:
#     print('Enter a valid MAVLink csv file path.')
#     sys.exit()

# print('target_mav_data: \r\n{}'.format(target_mav_data))
###############################################################################
# Plot 

