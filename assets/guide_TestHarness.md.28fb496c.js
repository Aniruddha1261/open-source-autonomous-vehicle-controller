import { _ as _imports_2, a as _imports_3, b as _imports_5, c as _imports_6, d as _imports_7, e as _imports_8, f as _imports_9 } from "./chunks/MakeProgram.34757920.js";
import { _ as _imports_4 } from "./chunks/xc32id.6d531468.js";
import { _ as _export_sfc, o as openBlock, c as createElementBlock, V as createStaticVNode } from "./chunks/framework.dd7eec84.js";
const _imports_0 = "/open-source-autonomous-vehicle-controller/assets/IMU1.bff4df21.png";
const _imports_1 = "/open-source-autonomous-vehicle-controller/assets/IMU2.c3c7fa0d.jpg";
const _imports_10 = "/open-source-autonomous-vehicle-controller/assets/IMU3.49150670.png";
const _imports_11 = "/open-source-autonomous-vehicle-controller/assets/MotorTest1.a465dc03.jpg";
const _imports_12 = "/open-source-autonomous-vehicle-controller/assets/MotorTest2.1ddc37cd.jpg";
const _imports_13 = "/open-source-autonomous-vehicle-controller/assets/MotorTest3.195a30e7.jpg";
const _imports_14 = "/open-source-autonomous-vehicle-controller/assets/GPS1.94a29467.jpg";
const _imports_15 = "/open-source-autonomous-vehicle-controller/assets/GPS2.5a23e23f.png";
const _imports_16 = "/open-source-autonomous-vehicle-controller/assets/RC1.23ee2679.png";
const _imports_17 = "/open-source-autonomous-vehicle-controller/assets/RC2.c0e68c4d.jpg";
const _imports_18 = "/open-source-autonomous-vehicle-controller/assets/RC3.196f946e.png";
const _imports_19 = "/open-source-autonomous-vehicle-controller/assets/MavLink1.dda91a3b.png";
const _imports_20 = "/open-source-autonomous-vehicle-controller/assets/MavLink2.06e989c9.jpg";
const _imports_21 = "/open-source-autonomous-vehicle-controller/assets/MavLink3.f7963776.jpg";
const _imports_22 = "/open-source-autonomous-vehicle-controller/assets/Mavlink4.a492760c.png";
const _imports_23 = "/open-source-autonomous-vehicle-controller/assets/MavLink5.f14b081f.png";
const _imports_24 = "/open-source-autonomous-vehicle-controller/assets/MavLink6.cd5745ad.png";
const __pageData = JSON.parse('{"title":"Test Harness","description":"","frontmatter":{},"headers":[],"relativePath":"guide/TestHarness.md","filePath":"guide/TestHarness.md"}');
const _sfc_main = { name: "guide/TestHarness.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="test-harness" tabindex="-1">Test Harness <a class="header-anchor" href="#test-harness" aria-label="Permalink to &quot;Test Harness&quot;">​</a></h1><p><img src="' + _imports_0 + '" alt="IMU Connections"></p><p><img src="' + _imports_1 + '" alt="IMU Connections"></p><p>for reference to the IMU documentation refer <a href="https://learn.sparkfun.com/tutorials/sparkfun-9dof-imu-icm-20948-breakout-hookup-guide" target="_blank" rel="noreferrer">here</a></p><h2 id="imu-test-harness" tabindex="-1">IMU Test Harness <a class="header-anchor" href="#imu-test-harness" aria-label="Permalink to &quot;IMU Test Harness&quot;">​</a></h2><ul><li><p>File -&gt; Open Project <img src="' + _imports_2 + '" alt="Open Project"></p></li><li><p>Now navigate to -&gt; open-source-autonomous-vehicle-controller -&gt; lib -&gt; Test_harness.X you would be able to see the below window with the serial project open</p></li></ul><ul><li><p>Now Open Test_harness.X Project Properties (File -&gt; Project Properties) <img src="' + _imports_3 + '" alt="Test_harness Project Properties"></p></li><li><p>Choose Connected Hardware Tool to PICkit3</p></li><li><p>Navigate to xc32-ld <img src="' + _imports_4 + '" alt="xc32-id"></p></li><li><p>Choose General as the option category <img src="' + _imports_5 + '" alt="General option category"></p></li><li><p>set the Heap Size (bytes) to be 8000 bytes <img src="' + _imports_6 + '" alt="Heap Size"></p></li><li><p>Click OK to save the modified Project Properties <img src="' + _imports_7 + '" alt="OK"></p></li><li><p>In the main.c file, set the IMU_test boolean as TRUE</p></li><li><p>Click Clean and Build <img src="' + _imports_8 + '" alt="Clean and Build"></p></li><li><p>Click Make and Program Device <img src="' + _imports_9 + '" alt="Make and Program Device"></p></li><li><p>Open your preset serial terminal application (CoolTerm)</p></li></ul><p>Output should be: <img src="' + _imports_10 + '" alt="Output for IMU"></p><h2 id="motor-test-harness" tabindex="-1">Motor Test Harness <a class="header-anchor" href="#motor-test-harness" aria-label="Permalink to &quot;Motor Test Harness&quot;">​</a></h2><h3 id="hardware-setup-for-motor" tabindex="-1">Hardware Setup for Motor <a class="header-anchor" href="#hardware-setup-for-motor" aria-label="Permalink to &quot;Hardware Setup for Motor&quot;">​</a></h3><p><img src="' + _imports_11 + '" alt="Motor Connections"></p><p><img src="' + _imports_12 + '" alt="Motor Connections"></p><p><img src="' + _imports_13 + '" alt="Motor Connections"></p><h3 id="software-setup-for-motor" tabindex="-1">Software Setup for Motor <a class="header-anchor" href="#software-setup-for-motor" aria-label="Permalink to &quot;Software Setup for Motor&quot;">​</a></h3><ul><li><p>In the main.c file, set the Servo_test boolean as TRUE or the Brushless_test boolean as TRUE depending on if you have a servo or brushless motor.</p></li><li><p>Click Clean and Build <img src="' + _imports_8 + '" alt="Clean and Build"></p></li><li><p>Click Make and Program Device <img src="' + _imports_9 + '" alt="Make and Program Device"></p></li><li><p>Open your preset serial terminal application (CoolTerm)</p></li></ul><p>Output should be:</p><h2 id="gps-test-harness" tabindex="-1">GPS Test Harness <a class="header-anchor" href="#gps-test-harness" aria-label="Permalink to &quot;GPS Test Harness&quot;">​</a></h2><h3 id="hardware-setup-for-gps" tabindex="-1">Hardware Setup for GPS <a class="header-anchor" href="#hardware-setup-for-gps" aria-label="Permalink to &quot;Hardware Setup for GPS&quot;">​</a></h3><p><img src="' + _imports_14 + '" alt="GPS Test Harness"></p><h3 id="software-setup-for-gps" tabindex="-1">Software Setup for GPS <a class="header-anchor" href="#software-setup-for-gps" aria-label="Permalink to &quot;Software Setup for GPS&quot;">​</a></h3><ul><li><p>In the main.c file, set the GPS_test boolean as TRUE.</p></li><li><p>Click Clean and Build <img src="' + _imports_8 + '" alt="Clean and Build"></p></li><li><p>Click Make and Program Device <img src="' + _imports_9 + '" alt="Make and Program Device"></p></li><li><p>Open your preset serial terminal application (CoolTerm)</p></li></ul><p>Output should be: <img src="' + _imports_15 + '" alt="GPS Test Output"></p><h2 id="rc-receiver-test-harness" tabindex="-1">RC Receiver Test Harness <a class="header-anchor" href="#rc-receiver-test-harness" aria-label="Permalink to &quot;RC Receiver Test Harness&quot;">​</a></h2><h3 id="hardware-setup-for-rc-receiver" tabindex="-1">Hardware Setup for RC Receiver <a class="header-anchor" href="#hardware-setup-for-rc-receiver" aria-label="Permalink to &quot;Hardware Setup for RC Receiver&quot;">​</a></h3><p><img src="' + _imports_16 + '" alt="RC Connections"></p><p><img src="' + _imports_17 + '" alt="RC Connections"></p><h3 id="software-setup-for-rc-receiver" tabindex="-1">Software Setup for RC Receiver <a class="header-anchor" href="#software-setup-for-rc-receiver" aria-label="Permalink to &quot;Software Setup for RC Receiver&quot;">​</a></h3><ul><li><p>In the main.c file, set the Radio_test boolean as TRUE.</p></li><li><p>Click Clean and Build <img src="' + _imports_8 + '" alt="Clean and Build"></p></li><li><p>Click Make and Program Device <img src="' + _imports_9 + '" alt="Make and Program Device"></p></li><li><p>Open your preset serial terminal application (CoolTerm)</p></li></ul><p>Output should be:</p><p><img src="' + _imports_18 + '" alt="RC Receiver test output"></p><h2 id="mavlink-test-harness" tabindex="-1">Mavlink Test Harness <a class="header-anchor" href="#mavlink-test-harness" aria-label="Permalink to &quot;Mavlink Test Harness&quot;">​</a></h2><h3 id="hardware-setup-for-mavlink" tabindex="-1">Hardware Setup for Mavlink <a class="header-anchor" href="#hardware-setup-for-mavlink" aria-label="Permalink to &quot;Hardware Setup for Mavlink&quot;">​</a></h3><p><img src="' + _imports_19 + '" alt="Mavlink Test Harness"></p><p><img src="' + _imports_20 + '" alt="Mavlink Test Harness"></p><p><img src="' + _imports_21 + '" alt="Mavlink Test Harness"></p><h3 id="software-setup-for-rc-mavlink" tabindex="-1">Software Setup for RC Mavlink <a class="header-anchor" href="#software-setup-for-rc-mavlink" aria-label="Permalink to &quot;Software Setup for RC Mavlink&quot;">​</a></h3><ul><li>Open QGroundControl</li></ul><p><img src="' + _imports_22 + '" alt="QGroundControl"></p><ul><li><p>In the main.c file, set the Heartbeat_test boolean as TRUE.</p></li><li><p>Click Clean and Build <img src="' + _imports_8 + '" alt="Clean and Build"></p></li><li><p>Click Make and Program Device <img src="' + _imports_9 + '" alt="Make and Program Device"></p></li><li><p>In QGroundControl, make sure that the upper left hand corner says “Armed”</p></li><li><p>Click on the Q in the upper left hand corner for the menu to appear</p></li></ul><p><img src="' + _imports_23 + '" alt="QGroundControl"></p><ul><li>Click on Analyze Tools -&gt; MAVlink Inspector</li></ul><p><img src="' + _imports_24 + '" alt="QGroundControl"></p><ul><li>Make sure that you’re receiving a heartbeat</li></ul>', 43);
const _hoisted_44 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_44);
}
const TestHarness = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  TestHarness as default
};
